package com.java.manager;

import java.util.List;

import javax.faces.event.ValueChangeEvent;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Projection;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;

public class PatientDAOImpl implements PatientDAO{

	SessionFactory sf;
	Session session;
	
private String localCode;
	
	public String getLocalCode() {
		return localCode;
	}
	public void setLocalCode(String localCode) {
		this.localCode = localCode;
	}
	
	public void employLocalCodeChanged(ValueChangeEvent e) {
		this.localCode = e.getNewValue().toString();
	}
	
	@Override
	public List<Patient_Enrollment> showPatient() {
		
		sf = SessionHelper.getConnection();
		session = sf.openSession();
		Criteria cr = session.createCriteria(Patient_Enrollment.class);
		return cr.list();
	}
	@Override
	public List<Patient_Enrollment> searchPatient(String searchType, String searchValue) {
		// TODO Auto-generated method stub
		return null;
	}
	
// UhId---------------------------------------------------------------------------------

	public List<String> getUhId(){
		sf = SessionHelper.getConnection();
		session = sf.openSession();
		Criteria cr = session.createCriteria(Patient_Enrollment.class);
		Projection projection = Projections.distinct(Projections.property("uhId"));
		cr.setProjection(projection);
		List<String> list = cr.list();	
		return list;
	}
	

	public List<Patient_Enrollment> getPatientListByUhId(String uhId){
		SessionFactory sf = SessionHelper.getConnection();
		Session session = sf.openSession();
		Criteria cr = session.createCriteria(Patient_Enrollment.class);
		cr.add(Restrictions.eq("uhId",uhId));
		List<Patient_Enrollment> patientList = cr.list();
		return patientList;
	}
//-------------------------------------------------------------------------------------------

// FirstName---------------------------------------------------------------------------------

		public List<String> getFirstName(){
			sf = SessionHelper.getConnection();
			session = sf.openSession();
			Criteria cr = session.createCriteria(Patient_Enrollment.class);
			Projection projection = Projections.distinct(Projections.property("firstName"));
			cr.setProjection(projection);
			List<String> list = cr.list();	
			return list;
		}
		

		public List<Patient_Enrollment> getFirstNameList(String firstName){
			SessionFactory sf = SessionHelper.getConnection();
			Session session = sf.openSession();
			Criteria cr = session.createCriteria(Patient_Enrollment.class);
			cr.add(Restrictions.eq("firstName",firstName));
			List<Patient_Enrollment> patientList = cr.list();
			return patientList;
		}
//--------------------------------------------------------------------------------------
		
// UserName---------------------------------------------------------------------------------

				public List<String> getUserName(){
					sf = SessionHelper.getConnection();
					session = sf.openSession();
					Criteria cr = session.createCriteria(Patient_Enrollment.class);
					Projection projection = Projections.distinct(Projections.property("userName"));
					cr.setProjection(projection);
					List<String> list = cr.list();	
					return list;
				}
				

				public List<Patient_Enrollment> getUserNameList(String userName){
					SessionFactory sf = SessionHelper.getConnection();
					Session session = sf.openSession();
					Criteria cr = session.createCriteria(Patient_Enrollment.class);
					cr.add(Restrictions.eq("userName",userName));
					List<Patient_Enrollment> patientList = cr.list();
					return patientList;
				}
//--------------------------------------------------------------------------------------
}
